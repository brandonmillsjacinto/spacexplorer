/*
 * SpaceXplorer: A text-based space exploration game
 * Author: [Your Name]
 * CLion 2024.3.2, C99
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
#include <stdbool.h>
#include "spacexplorer.h"

#define GRID_SIZE 18
#define MAX_JUNK 30
#define MAX_HEALTH 100
#define RESOURCE_MAX 100

// Structure Definitions

typedef struct {
    int x, y;
} Position;

typedef struct {
    Position pos;
    int health;
    int fuel;
    int junkCollected;
} Player;

typedef struct {
    Position pos;
} Asteroid;

typedef struct {
    Position pos[MAX_JUNK];
    int count;
} JunkField;

// Function Prototypes
void loadIntro();
void saveScore(Player *player);
void initGame(Player *player, Asteroid *asteroid, JunkField *junk);
void drawGrid(Player *player, Asteroid *asteroid, JunkField *junk);
void movePlayer(Player *player, char move);
void moveAsteroid(Asteroid *asteroid);
bool isGameOver(Player *player, Asteroid *asteroid);
void collectJunk(Player *player, JunkField *junk);
bool isPositionEqual(Position a, Position b);
void showStatus(Player *player);

// Main Function
int main() {
    srand(time(NULL));
    Player player;
    Asteroid asteroid;
    JunkField junk;
    char command;

    loadIntro();
    initGame(&player, &asteroid, &junk);

    while (!isGameOver(&player, &asteroid)) {
        drawGrid(&player, &asteroid, &junk);
        printf("\nCommand (WASD to move, I for status, Q to quit): ");
        scanf(" %c", &command);
        command = toupper(command);

        if (command == 'Q') break;
        if (command == 'I') {
            showStatus(&player);
            continue;
        }

        movePlayer(&player, command);
        moveAsteroid(&asteroid);
        collectJunk(&player, &junk);
        player.fuel--;
    }

    drawGrid(&player, &asteroid, &junk);

    if (isPositionEqual(player.pos, asteroid.pos)) {
        printf("\nCrashed into an asteroid! Game Over.\n");
    } else if (player.fuel <= 0) {
        printf("\nYou ran out of fuel! Game Over.\n");
    } else {
        printf("\nGame ended.\n");
    }

    saveScore(&player);
    return 0;
}

// Function Implementations

void loadIntro() {
    FILE *file = fopen("intro.txt", "r");
    if (file) {
        char line[256];
        while (fgets(line, sizeof(line), file)) {
            printf("%s", line);
        }
        fclose(file);
    } else {
        printf("Welcome to SpaceXplorer!\n");
    }
    printf("Press Enter to begin...");
    getchar();
    getchar();
}

void saveScore(Player *player) {
    FILE *file = fopen("leaderboard.txt", "a");
    if (file) {
        fprintf(file, "Junk Collected: %d, Fuel Left: %d\n", player->junkCollected, player->fuel);
        fclose(file);
    }
}

void initGame(Player *player, Asteroid *asteroid, JunkField *junk) {
    player->pos.x = 0;
    player->pos.y = 0;
    player->health = MAX_HEALTH;
    player->fuel = RESOURCE_MAX;
    player->junkCollected = 0;

    asteroid->pos.x = GRID_SIZE - 1;
    asteroid->pos.y = GRID_SIZE - 1;

    junk->count = MAX_JUNK;
    for (int i = 0; i < junk->count; ++i) {
        junk->pos[i].x = rand() % GRID_SIZE;
        junk->pos[i].y = rand() % GRID_SIZE;
    }
}

void drawGrid(Player *player, Asteroid *asteroid, JunkField *junk) {
    for (int y = 0; y < GRID_SIZE; ++y) {
        for (int x = 0; x < GRID_SIZE; ++x) {
            Position pos = {x, y};
            if (isPositionEqual(pos, player->pos)) {
                printf("P ");
            } else if (isPositionEqual(pos, asteroid->pos)) {
                printf("A ");
            } else {
                bool isJunk = false;
                for (int j = 0; j < junk->count; ++j) {
                    if (isPositionEqual(pos, junk->pos[j])) {
                        printf("J ");
                        isJunk = true;
                        break;
                    }
                }
                if (!isJunk) printf(". ");
            }
        }
        printf("\n");
    }
}

void movePlayer(Player *player, char move) {
    switch (move) {
        case 'W': if (player->pos.y > 0) player->pos.y--; break;
        case 'S': if (player->pos.y < GRID_SIZE - 1) player->pos.y++; break;
        case 'A': if (player->pos.x > 0) player->pos.x--; break;
        case 'D': if (player->pos.x < GRID_SIZE - 1) player->pos.x++; break;
        default: break;
    }
}

void moveAsteroid(Asteroid *asteroid) {
    if (asteroid->pos.x > 0) asteroid->pos.x--;
    if (asteroid->pos.y > 0) asteroid->pos.y--;
}

bool isGameOver(Player *player, Asteroid *asteroid) {
    return player->fuel <= 0 || isPositionEqual(player->pos, asteroid->pos);
}

void collectJunk(Player *player, JunkField *junk) {
    for (int i = 0; i < junk->count; ++i) {
        if (isPositionEqual(player->pos, junk->pos[i])) {
            player->junkCollected++;
            player->fuel += 5;
            junk->pos[i] = junk->pos[junk->count - 1];
            junk->count--;
            printf("Collected space junk!\n");
            return;
        }
    }
}

bool isPositionEqual(Position a, Position b) {
    return a.x == b.x && a.y == b.y;
}

void showStatus(Player *player) {
    printf("\nShip Health: %d\nFuel: %d\nJunk Collected: %d\n",
           player->health, player->fuel, player->junkCollected);
}

