#ifndef SPACEXPLORER_H 
#define SPACEXPLORER_H

#define GRID_SIZE 21 
#define MAX_JUNK 70 
#define MAX_ASTEROIDS 40 
#define MAX_NAME_LEN 30 
#define MAX_LEADERBOARD_ENTRIES 10 

typedef enum { EASY, MEDIUM, HARD } Difficulty; 

typedef enum { UP, DOWN, LEFT, RIGHT } Direction; 

typedef struct { 
    int x, y;
} Position;

typedef struct { 
    char name[MAX_NAME_LEN]; 
    Position pos; 
    int fuel; 
    int health; 
    int junkCollected; 
} Player;

typedef struct {
    Position pos; 
    Direction direction; 
    int active; 
} Asteroid;

typedef struct {
    Position pos; 
    int active; 
} Junk;

typedef struct { 
    char name[MAX_NAME_LEN]; 
    int fuelLeft; 
    int health; 
    int movesTaken; 
} LeaderboardEntry;

void displayGrid(Player *player, Asteroid asteroids[], Junk junk[], int junkCount, int asteroidCount); 
void movePlayer(Player *player, char direction);
void moveAsteroids(Asteroid asteroids[], int asteroidCount); 
int checkCollision(Player *player, Asteroid asteroids[], int asteroidCount); 
void collectJunk(Player *player, Junk junk[], int *junkCount); 
void readIntroFromFile(const char *filename); 
void writeScoreToFile(const char *filename, Player *player, Difficulty diff); 
void initJunk(Junk junk[], int count); 
void showStats(Player *player); 
void chooseDifficulty(Difficulty *diff, Player *player, int *junkCount, int *asteroidCount); 
void initAsteroids(Asteroid asteroids[], int count); 
void displayMainMenu(); 
void showLeaderboard(); 
void startNewGame(Player *player, Asteroid asteroids[], Junk junk[], int *junkCount, int *asteroidCount); 
int compareMoves(const void *a, const void *b); 

#endif
