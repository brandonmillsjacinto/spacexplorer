/* Filename: spacexplorer.h (VERSION 2).c
Description: Main C for spacexplorer
Author: Brandon Mills Jacinto
Version: 2
*/

#include <stdio.h> 
#include "spacexplorer.h"

void displayGrid(Player *player, Asteroid asteroids[], Junk junk[], int junkCount, int asteroidCount) {
    for (int y = 0; y < GRID_SIZE; y++) {
        for (int x = 0; x < GRID_SIZE; x++) { 
            if (player->pos.x == x && player->pos.y == y) 
                printf("P ");
            else {
               int found = 0;
                                for (int i = 0; i < asteroidCount; i++) { .
             if (asteroids[i].active && asteroids[i].pos.x == x && asteroids[i].pos.y == y) { 
                   printf("A "); 
                  found = 1; 
                  break; 
                }
                }
                     if (!found) { 
               for (int i = 0; i < junkCount; i++) { 
                if (junk[i].active && junk[i].pos.x == x && junk[i].pos.y == y) { 
                   printf("J "); 
                 found = 1; 
                     break; 
               }
              }
           }
        if (!found) printf(". "); 
            }
        }
        printf("\n"); 
    }
}
void movePlayer(Player *player, char direction) { 
    int newX = player->pos.x;
                  int newY = player->pos.y;
switch (direction) {
    case 'w': 
      newY--; 
       break; 
     case 's': 
     newY++; 
       break; 
          case 'a': 
         newX--; 
        break; 
       case 'd': 
         newX++; 
      break; 
     default:
            printf("Invalid input. Use w/a/s/d (w - Up, a - Left, s - Down, d - Right).\n"); /
            return;
    }
    if (newX < 0 || newX >= GRID_SIZE || newY < 0 || newY >= GRID_SIZE) {
        printf("Move not possible, you are at the edge! Try again.\n"); 
        return;
    }
  player->pos.x = newX;
player->pos.y = newY;
player->fuel--;
}
void moveAsteroids(Asteroid asteroids[], int asteroidCount) {
 for (int i = 0; i < asteroidCount; i++) { 
    if (!asteroids[i].active) continue; 
     int newX = asteroids[i].pos.x;
   int newY = asteroids[i].pos.y;
        switch (asteroids[i].direction) {
            case UP: 
newY--; 
break; 
            case DOWN: 
newY++; 
break; 
            case LEFT: 
newX--; 
break; 
            case RIGHT: 
newX++; 
break; 
        }

        if (newX < 0 || newX >= GRID_SIZE || newY < 0 || newY >= GRID_SIZE) {
 asteroids[i].direction = rand() % 4; 
  } else {
      asteroids[i].pos.x = newX;
          asteroids[i].pos.y = newY;
        }
    }
}
int checkCollision(Player *player, Asteroid asteroids[], int asteroidCount) { 
 for (int i = 0; i < asteroidCount; i++) { 
     if (asteroids[i].active &&
          player->pos.x == asteroids[i].pos.x &&
        player->pos.y == asteroids[i].pos.y) {
           return 1; .
      }
  }
    return 0; 
}
void collectJunk(Player *player, Junk junk[], int *junkCount) { 
 for (int i = 0; i < *junkCount; i++) { 
   if (junk[i].active && junk[i].pos.x == player->pos.x && junk[i].pos.y == player->pos.y) { 
   junk[i].active = 0; 
        player->junkCollected++; 
     player->fuel += 3; 
     if (player->fuel > 100) player->fuel = 100; 
            player->health += 1; /
        if (player->health > 100) player->health = 100; 
        }
    }
}
